#!/usr/bin/env python2.7

import argparse
import collections
import glob
import importlib
import logging.handlers
import os
import resource
import snmpy.mibgen
import snmpy.server
import socket
import sys
import urlparse
import yaml

def parse_conf(parser):
    try:
        args = parser.parse_args()
        conf = yaml.load(open(args.config_file))

        parser.set_defaults(**(conf['snmpy_global']))

        args = parser.parse_args()
        conf['snmpy_global'].update(vars(args))

        if conf['snmpy_global']['create_pid']:
            background(conf['snmpy_global']['create_pid'])

        create_log(conf['snmpy_global']['logger_dest'], conf['snmpy_global']['debug'])
    except (IOError, yaml.parser.ParserError, yaml.scanner.ScannerError) as e:
        parser.error('cannot parse configuration file: %s' % e)

    if conf['snmpy_global']['include_dir']:
        for item in glob.glob('%s/*.y*ml' % conf['snmpy_global']['include_dir']):
            try:
                indx, name = os.path.splitext(os.path.basename(item))[0].split('_', 1)
                if name in conf:
                    raise ValueError('%s: plugin name already assigned at another index', name)
                if int(indx) < 1:
                    raise ValueError('%s: invalid plugin index', indx)
                if int(indx) in list(v['snmpy_index'] for k, v in conf.items() if k != 'snmpy_global'):
                    raise ValueError('%s: index already assigned to another plugin', indx)

                conf[name] = {
                    'name':        name,
                    'time':        0,
                    'save':        False,
                    'snmpy_index': int(indx),
                    'snmpy_extra': dict(args.extra),
                }
                conf[name].update(yaml.load(open(item)) or {})

                if conf['snmpy_global']['persist_dir'] and conf[name].get('retain', False):
                    conf[name]['save'] = '%s/%s.dat' % (conf['snmpy_global']['persist_dir'], name)

            except (IOError, yaml.parser.ParserError, yaml.scanner.ScannerError) as e:
                parser.error('cannot parse configuration file: %s' % e)

    return conf


def create_log(dest=None, debug=False):
    logger = logging.getLogger()
    formatter = logging.Formatter('%(asctime)s.%(msecs)03d%(module)20s:%(lineno)-3d %(threadName)-12s %(levelname)8s: %(message)s', '%Y-%m-%d %H:%M:%S')

    if dest or debug:
        if dest:
            log = urlparse.urlparse(dest)
            if log.scheme == 'file':
                hdlr = logging.handlers.WatchedFileHandler(log.path)
            elif log.scheme.startswith('syslog'):
                formatter = logging.Formatter('snmpy[%(process)d]: %(message)s')
                netloc = log.netloc.split(':')
                facility = urlparse.parse_qs(log.query)['facility'][0]
                if len(netloc) == 1 or not netloc[1]:
                    netloc.insert(1, 514)
                if log.scheme == 'syslog+tcp':
                    hdlr = logging.handlers.SysLogHandler(
                                           address=(netloc[0], int(netloc[1])),
                                           facility=facility,
                                           socktype=socket.SOCK_STREAM)
                elif log.scheme == 'syslog+udp':
                    hdlr = logging.handlers.SysLogHandler(
                                           address=(netloc[0], int(netloc[1])),
                                           facility=facility)
                else:
                    hdlr = logging.handlers.SysLogHandler(
                              address='/dev/log' if not log.path else log.path,
                              facility=facility)
            else:
                hdlr = logging.StreamHandler()
        else:
            hdlr = logging.StreamHandler()

        hdlr.setFormatter(formatter)

        logger.setLevel(logging.DEBUG if debug else logging.INFO)
        logger.addHandler(hdlr)

        logger.info('logging started')
    else:
        logger.addHandler(logging.NullHandler())

    return logger

def background(path):
    if os.fork() == 0:
        os.setsid()

        pid = os.fork()
        if pid != 0:
            path.write('%d\n' % pid)
            path.flush()
            path.close()
            os._exit(0)
    else:
        os._exit(0)

    fd_lim = resource.getrlimit(resource.RLIMIT_NOFILE)[1]
    for fd_num in range(fd_lim if fd_lim != resource.RLIM_INFINITY else 1024):
        try:
            os.close(fd_num)
        except OSError:
            pass


def initialize(conf):
    logging.info('initialization started')

    plugins = collections.OrderedDict()

    try:
        keys = [i for i in sorted(conf.keys()) if i != 'snmpy_global']
        logging.info('configuring %d plugin(s): %s', len(keys), ', '.join(keys))

        for name in keys:
            logging.debug('%s: creating plugin instance', name)

            base = conf[name]['module']
            full = 'snmpy.plugin.%s' % base
            code = importlib.import_module(full)
            plugins[name] = getattr(code, base)(conf[name])

            logging.debug('%s: created plugin instance of %s (%s)', name, base, plugins[name])
    except Exception as e:
        snmpy.log_fatal(e, 'initialization failed')

    logging.info('initialization complete')
    return plugins.values()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Modular SNMP AgentX system')
    parser.add_argument('-f', '--config-file', default='/etc/snmpy.yml',
                        help='system configuration file')
    parser.add_argument('-i', '--include-dir',
                        help='plugin configuration path')
    parser.add_argument('-t', '--persist-dir',
                        help='plugin state persistence path')
    parser.add_argument('-r', '--parent-root', default='enterprises',
                        help='parent root class name')
    parser.add_argument('-s', '--system-root', type=int, default=1123,
                        help='system root object id')
    parser.add_argument('-l', '--logger-dest', default='console:',
                        help='filename, syslog:<facility>, or console:')
    parser.add_argument('-w', '--httpd-port', default=1123, type=int,
                        help='httpd server listens on this port')
    parser.add_argument('-p', '--create-pid', nargs='?', const='/var/run/snmpy.pid', type=argparse.FileType('w'), metavar='PID_FILE',
                        help='daemonize and write pidfile')
    parser.add_argument('-m', '--create-mib', nargs='?', const=sys.stdout, type=argparse.FileType('w'), metavar='MIB_FILE',
                        help='display generated mib file and exit')
    parser.add_argument('-d', '--debug', default=False, action='store_true',
                        help='enable debug logging')
    parser.add_argument('-e', '--extra', default=[], action='append', nargs=2,
                        help='extra key/val pairs for plugins')
    conf = parse_conf(parser)
    mods = initialize(conf)

    if conf['snmpy_global']['create_mib']:
        conf['snmpy_global']['create_mib'].write(snmpy.mibgen.create_mib(conf, mods))
    else:
        snmpy.server.SnmpyAgent(conf, mods)

# vim: sw=4 ts=4 sts=4 sta si et nu ruler cinwords=if,elif,else,for,while,try,except,finally,def,class
